using System;
using System.Collections.Generic;
using System.Linq;
using MongoDB.Driver;
using NoteService.Models;

namespace NoteService.Repository
{
    public class NoteRepository : INoteRepository
    {
        //define a private variable to represent NoteContext
        NoteContext context;
        public NoteRepository(NoteContext _context)
        {
            this.context = _context;
        }

        //This method should be used to create a new note. NoteId should be autogenerated and
        // must start with 101.This should create a new NotUser if not exists else should push 
        //new note entry into existing NoteUser collection. UserId is identified by CreatedBy
        public bool CreateNote(Note note)
        {
            bool status = false;
            try
            {
                var NoteVal = context.Notes.Find(f => f.UserId == note.CreatedBy).FirstOrDefault();
                Note latestNotes = null;
                if (NoteVal != null)
                {
                    latestNotes = NoteVal.Notes.OrderByDescending(o => o.Id).FirstOrDefault();
                }
                var id = 101;
                if (latestNotes != null)
                {
                    id = latestNotes.Id + 1;
                }

                var userExists = context.Notes.Find(N => N.UserId == note.CreatedBy).FirstOrDefault();
               
                if (userExists == null || userExists.Notes.Count() == 0)
                    {
                    List<Note> NoteList = new List<Note>();
                    note.Id = id;
                    NoteList.Add(note);

                   
                  var noteuser = new NoteUser { UserId = note.CreatedBy, Notes = NoteList };
                    context.Notes.InsertOne(noteuser);
                    status = true;
                }
                else
                {

                    var existingNotes = userExists.Notes;
                    note.Id = id;
                    existingNotes.Add(note);
                   
                    var filter = Builders<NoteUser>.Filter.Where(C => C.UserId == userExists.UserId);
                    var update = Builders<NoteUser>.Update.Set(S => S.Notes, existingNotes);
                    var updateResult = context.Notes.UpdateOne(filter, update);
                    status = updateResult.IsAcknowledged == true ? true : false;

                }
                return status;
            }
            catch (Exception ex)
            {

            }
            return status;

        }

        //This method should be used to retreive all notes for a user
        public List<Note> FindAllNotesByUser(string userId)
        {
            var noteuser = context.Notes.Find(N => N.UserId == userId).FirstOrDefault();
         return noteuser != null ? noteuser.Notes.ToList() : null;
            ////return noteuser.Notes.ToList();
        }

        //This method should be used to delete a note for a specific user
        public bool DeleteNote(string userId, int noteId)
        {
            bool status = false;

            var noteUser = context.Notes.Find(S => S.UserId == userId).FirstOrDefault();
            if (noteUser != null)
            {

                var note = noteUser.Notes.FindAll(S => S.CreatedBy == userId);

                if (note.Count() == 0)
                {
                    return true;
                }
                if (note.Count() > 1)
                {

                    var existingNotes = note;
                    existingNotes.RemoveAll(S => S.Id == noteId);

                    var filter = Builders<NoteUser>.Filter.Where(C => C.UserId == userId);
                    var update = Builders<NoteUser>.Update.Set(S => S.Notes, existingNotes);
                    var updateResult = context.Notes.UpdateOne(filter, update);
                    status = updateResult.IsAcknowledged == true ? true : false;

                    status = true;
                }
                else
                {
                    // note.RemoveAll(S => S.Id == noteId && S.CreatedBy == userId);


                    //var filter = Builders<NoteUser>.Filter.Where(C => C.UserId == userId);
                    //var update = Builders<NoteUser>.Update.Set(S => S.Notes, note);
                    //var updateResult = context.Notes.UpdateOne(filter, update);
                    //status = updateResult.IsAcknowledged == true ? true : false;


                    var delCount = context.Notes.DeleteOne(S => S.UserId == userId);
                    status = delCount.IsAcknowledged ? true : false;

                }

            }
            else
            {

                status = false;
            }
            return status;
        }

        //This method is used to update an existing note for a user
        public bool UpdateNote(int noteId, string userId, Note note)
        {
            bool status = false;
            var noteuserExists = context.Notes.Find(S => S.UserId == note.CreatedBy).FirstOrDefault();
            if (noteuserExists == null)
            {
                var existingNotes = noteuserExists.Notes;
                existingNotes.Add(note);

                var filter = Builders<NoteUser>.Filter.Where(C => C.UserId == noteuserExists.UserId);
                var update = Builders<NoteUser>.Update.Set(S => S.Notes, existingNotes);
                var updateResult = context.Notes.UpdateOne(filter, update);
                status = updateResult.IsAcknowledged == true ? true : false;
            }
            else
            {
                status = true;
                var singleNote = noteuserExists.Notes.Find(S => S.Id == noteId);
                if (singleNote == null)
                {
                    status = false;
                }
                else
                {
                    var noteexists = noteuserExists.Notes;
                    noteexists.FirstOrDefault(S => S.Id == noteId && S.CreatedBy == userId).Title = note.Title;
                    noteexists.FirstOrDefault(S => S.Id == noteId && S.CreatedBy == userId).Content = note.Content;
                    noteexists.FirstOrDefault(S => S.Id == noteId && S.CreatedBy == userId).Status = note.Status;
                    //if (note.Reminders != null)
                    //{
                        noteexists.FirstOrDefault(S => S.Id == noteId && S.CreatedBy == userId).Reminders = note.Reminders;
                    //}
                    noteexists.FirstOrDefault(S => S.Id == noteId && S.CreatedBy == userId).Category = note.Category; ;
                    noteuserExists.Notes = noteexists;
                    var existingNotes = noteuserExists.Notes;


                    var filter = Builders<NoteUser>.Filter.Where(C => C.UserId == noteuserExists.UserId);
                    var update = Builders<NoteUser>.Update.Set(S => S.Notes, existingNotes);
                    var updateResult = context.Notes.UpdateOne(filter, update);
                    status = updateResult.IsAcknowledged == true ? true : false;
                }

            }
            return status;
        }


    }
}
